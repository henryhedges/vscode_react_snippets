{
	// Place your global snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and 
	// description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope 
	// is left empty or omitted, the snippet gets applied to all languages. The prefix is what is 
	// used to trigger the snippet and the body will be expanded and inserted. Possible variables are: 
	// $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders. 
	// Placeholders with the same ids are connected.
	// Example:
	// "Print to console": {
	// 	"scope": "javascript,typescript",
	// 	"prefix": "log",
	// 	"body": [
	// 		"console.log('$1');",
	// 		"$2"	
	// 	],
	// 	"description": "Log output to console"
	// }
	"React Functional Component": {
		"prefix": "rfc",
		"body": [
			"import React from 'react'",
			"",
			"export interface I${1:ComponentName}Props {",
			"  ",
			"}",
			"",
			"const ${1:ComponentName}: React.FC<I${1:ComponentName}Props> = () => {",
			"  return null",
			"}",
			"",
			"export default ${1:ComponentName}"
		],
		"description": "React Functional Component"
	},
	"Import Styled Component": {
		"prefix": "istc",
		"body": [
			"import {",
			"  ${2:StyledComponent}",
			"} from './${1:Component}.styles'"
		],
		"description": "Import Styled Component"
	},
	"React Testing Create File": {
		"prefix": "rtcf",
		"body": [
			"import React from 'react'",
			"import '@testing-library/jest-dom/extend-expect'",
			"import 'jest-styled-components'",
			"import { cleanup, render, RenderResult } from '../../../test/test-utils'",
			"import ${1:Component}, { I${1:Component}Props } from './${1:Component}'",
			"",
			"interface ISetupReturnObject<T> {",
			"  component: RenderResult",
			"  props: T",
			"}",
			"",
			"const defaultProps: I${1:Component}Props = {",
			"  e2e: 'e2e'",
			"}",
			"",
			"const setup = (customProps?: Partial<I${1:Component}Props>): ISetupReturnObject<I${1:Component}Props> => {",
			"  const props: I${1:Component}Props = {",
			"    ...defaultProps,",
			"    ...customProps",
			"  }",
			"",
			"  return {",
			"    component: render(<${1:Component} {...props}/>),",
			"    props",
			"  }",
			"}",
			"",
			"afterEach(cleanup)",
			"",
			"describe('<${1:Component}>', () => {",
			"  test('should render with all required props', () => {",
			"    const { component } = setup()",
			"    expect(component.getByE2e('e2e${2:E2ETag}')).toBeDefined()",
			"  })",
			"})",
			""
		],
		"description": "React Testing Create File"
	}
}